//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(Training.Ef6.Infrastructure.DatabaseFirst.StackOverflow2010Entities),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets9908a1e55535b3e116c35ec97204b96acb151aded45757e61041af836e99a03d))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.5.0")]
    internal sealed class ViewsForBaseEntitySets9908a1e55535b3e116c35ec97204b96acb151aded45757e61041af836e99a03d : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "9908a1e55535b3e116c35ec97204b96acb151aded45757e61041af836e99a03d"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "StackOverflow2010ModelStoreContainer.Badges")
            {
                return GetView0();
            }

            if (extentName == "StackOverflow2010ModelStoreContainer.Comments")
            {
                return GetView1();
            }

            if (extentName == "StackOverflow2010ModelStoreContainer.LinkTypes")
            {
                return GetView2();
            }

            if (extentName == "StackOverflow2010ModelStoreContainer.PostLinks")
            {
                return GetView3();
            }

            if (extentName == "StackOverflow2010ModelStoreContainer.Posts")
            {
                return GetView4();
            }

            if (extentName == "StackOverflow2010ModelStoreContainer.PostTypes")
            {
                return GetView5();
            }

            if (extentName == "StackOverflow2010ModelStoreContainer.Users")
            {
                return GetView6();
            }

            if (extentName == "StackOverflow2010ModelStoreContainer.Votes")
            {
                return GetView7();
            }

            if (extentName == "StackOverflow2010ModelStoreContainer.VoteTypes")
            {
                return GetView8();
            }

            if (extentName == "StackOverflow2010Entities.Badges")
            {
                return GetView9();
            }

            if (extentName == "StackOverflow2010Entities.Comments")
            {
                return GetView10();
            }

            if (extentName == "StackOverflow2010Entities.LinkTypes")
            {
                return GetView11();
            }

            if (extentName == "StackOverflow2010Entities.PostLinks")
            {
                return GetView12();
            }

            if (extentName == "StackOverflow2010Entities.Posts")
            {
                return GetView13();
            }

            if (extentName == "StackOverflow2010Entities.PostTypes")
            {
                return GetView14();
            }

            if (extentName == "StackOverflow2010Entities.Users")
            {
                return GetView15();
            }

            if (extentName == "StackOverflow2010Entities.Votes")
            {
                return GetView16();
            }

            if (extentName == "StackOverflow2010Entities.VoteTypes")
            {
                return GetView17();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for StackOverflow2010ModelStoreContainer.Badges.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Badges
        [StackOverflow2010Model.Store.Badges](T1.Badges_Id, T1.Badges_Name, T1.Badges_UserId, T1.Badges_Date)
    FROM (
        SELECT 
            T.Id AS Badges_Id, 
            T.Name AS Badges_Name, 
            T.UserId AS Badges_UserId, 
            T.Date AS Badges_Date, 
            True AS _from0
        FROM StackOverflow2010Entities.Badges AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for StackOverflow2010ModelStoreContainer.Comments.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Comments
        [StackOverflow2010Model.Store.Comments](T1.Comments_Id, T1.Comments_CreationDate, T1.Comments_PostId, T1.Comments_Score, T1.Comments_Text, T1.Comments_UserId)
    FROM (
        SELECT 
            T.Id AS Comments_Id, 
            T.CreationDate AS Comments_CreationDate, 
            T.PostId AS Comments_PostId, 
            T.Score AS Comments_Score, 
            T.Text AS Comments_Text, 
            T.UserId AS Comments_UserId, 
            True AS _from0
        FROM StackOverflow2010Entities.Comments AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for StackOverflow2010ModelStoreContainer.LinkTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing LinkTypes
        [StackOverflow2010Model.Store.LinkTypes](T1.LinkTypes_Id, T1.LinkTypes_Type)
    FROM (
        SELECT 
            T.Id AS LinkTypes_Id, 
            T.Type AS LinkTypes_Type, 
            True AS _from0
        FROM StackOverflow2010Entities.LinkTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for StackOverflow2010ModelStoreContainer.PostLinks.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PostLinks
        [StackOverflow2010Model.Store.PostLinks](T1.PostLinks_Id, T1.PostLinks_CreationDate, T1.PostLinks_PostId, T1.PostLinks_RelatedPostId, T1.PostLinks_LinkTypeId)
    FROM (
        SELECT 
            T.Id AS PostLinks_Id, 
            T.CreationDate AS PostLinks_CreationDate, 
            T.PostId AS PostLinks_PostId, 
            T.RelatedPostId AS PostLinks_RelatedPostId, 
            T.LinkTypeId AS PostLinks_LinkTypeId, 
            True AS _from0
        FROM StackOverflow2010Entities.PostLinks AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for StackOverflow2010ModelStoreContainer.Posts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Posts
        [StackOverflow2010Model.Store.Posts](T1.Posts_Id, T1.Posts_AcceptedAnswerId, T1.Posts_AnswerCount, T1.Posts_Body, T1.Posts_ClosedDate, T1.Posts_CommentCount, T1.Posts_CommunityOwnedDate, T1.Posts_CreationDate, T1.Posts_FavoriteCount, T1.Posts_LastActivityDate, T1.Posts_LastEditDate, T1.Posts_LastEditorDisplayName, T1.Posts_LastEditorUserId, T1.Posts_OwnerUserId, T1.Posts_ParentId, T1.Posts_PostTypeId, T1.Posts_Score, T1.Posts_Tags, T1.Posts_Title, T1.Posts_ViewCount)
    FROM (
        SELECT 
            T.Id AS Posts_Id, 
            T.AcceptedAnswerId AS Posts_AcceptedAnswerId, 
            T.AnswerCount AS Posts_AnswerCount, 
            T.Body AS Posts_Body, 
            T.ClosedDate AS Posts_ClosedDate, 
            T.CommentCount AS Posts_CommentCount, 
            T.CommunityOwnedDate AS Posts_CommunityOwnedDate, 
            T.CreationDate AS Posts_CreationDate, 
            T.FavoriteCount AS Posts_FavoriteCount, 
            T.LastActivityDate AS Posts_LastActivityDate, 
            T.LastEditDate AS Posts_LastEditDate, 
            T.LastEditorDisplayName AS Posts_LastEditorDisplayName, 
            T.LastEditorUserId AS Posts_LastEditorUserId, 
            T.OwnerUserId AS Posts_OwnerUserId, 
            T.ParentId AS Posts_ParentId, 
            T.PostTypeId AS Posts_PostTypeId, 
            T.Score AS Posts_Score, 
            T.Tags AS Posts_Tags, 
            T.Title AS Posts_Title, 
            T.ViewCount AS Posts_ViewCount, 
            True AS _from0
        FROM StackOverflow2010Entities.Posts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for StackOverflow2010ModelStoreContainer.PostTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PostTypes
        [StackOverflow2010Model.Store.PostTypes](T1.PostTypes_Id, T1.PostTypes_Type)
    FROM (
        SELECT 
            T.Id AS PostTypes_Id, 
            T.Type AS PostTypes_Type, 
            True AS _from0
        FROM StackOverflow2010Entities.PostTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for StackOverflow2010ModelStoreContainer.Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Users
        [StackOverflow2010Model.Store.Users](T1.Users_Id, T1.Users_AboutMe, T1.Users_Age, T1.Users_CreationDate, T1.Users_DisplayName, T1.Users_DownVotes, T1.Users_EmailHash, T1.Users_LastAccessDate, T1.Users_Location, T1.Users_Reputation, T1.Users_UpVotes, T1.Users_Views, T1.Users_WebsiteUrl, T1.Users_AccountId, T1.Users_Region)
    FROM (
        SELECT 
            T.Id AS Users_Id, 
            T.AboutMe AS Users_AboutMe, 
            T.Age AS Users_Age, 
            T.CreationDate AS Users_CreationDate, 
            T.DisplayName AS Users_DisplayName, 
            T.DownVotes AS Users_DownVotes, 
            T.EmailHash AS Users_EmailHash, 
            T.LastAccessDate AS Users_LastAccessDate, 
            T.Location AS Users_Location, 
            T.Reputation AS Users_Reputation, 
            T.UpVotes AS Users_UpVotes, 
            T.Views AS Users_Views, 
            T.WebsiteUrl AS Users_WebsiteUrl, 
            T.AccountId AS Users_AccountId, 
            T.Region AS Users_Region, 
            True AS _from0
        FROM StackOverflow2010Entities.Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for StackOverflow2010ModelStoreContainer.Votes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Votes
        [StackOverflow2010Model.Store.Votes](T1.Votes_Id, T1.Votes_PostId, T1.Votes_UserId, T1.Votes_BountyAmount, T1.Votes_VoteTypeId, T1.Votes_CreationDate, T1.Votes_RowVersion)
    FROM (
        SELECT 
            T.Id AS Votes_Id, 
            T.PostId AS Votes_PostId, 
            T.UserId AS Votes_UserId, 
            T.BountyAmount AS Votes_BountyAmount, 
            T.VoteTypeId AS Votes_VoteTypeId, 
            T.CreationDate AS Votes_CreationDate, 
            T.RowVersion AS Votes_RowVersion, 
            True AS _from0
        FROM StackOverflow2010Entities.Votes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for StackOverflow2010ModelStoreContainer.VoteTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing VoteTypes
        [StackOverflow2010Model.Store.VoteTypes](T1.VoteTypes_Id, T1.VoteTypes_Name)
    FROM (
        SELECT 
            T.Id AS VoteTypes_Id, 
            T.Name AS VoteTypes_Name, 
            True AS _from0
        FROM StackOverflow2010Entities.VoteTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for StackOverflow2010Entities.Badges.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Badges
        [StackOverflow2010Model.Badge](T1.Badge_Id, T1.Badge_Name, T1.Badge_UserId, T1.Badge_Date)
    FROM (
        SELECT 
            T.Id AS Badge_Id, 
            T.Name AS Badge_Name, 
            T.UserId AS Badge_UserId, 
            T.Date AS Badge_Date, 
            True AS _from0
        FROM StackOverflow2010ModelStoreContainer.Badges AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for StackOverflow2010Entities.Comments.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Comments
        [StackOverflow2010Model.Comment](T1.Comment_Id, T1.Comment_CreationDate, T1.Comment_PostId, T1.Comment_Score, T1.Comment_Text, T1.Comment_UserId)
    FROM (
        SELECT 
            T.Id AS Comment_Id, 
            T.CreationDate AS Comment_CreationDate, 
            T.PostId AS Comment_PostId, 
            T.Score AS Comment_Score, 
            T.Text AS Comment_Text, 
            T.UserId AS Comment_UserId, 
            True AS _from0
        FROM StackOverflow2010ModelStoreContainer.Comments AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for StackOverflow2010Entities.LinkTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing LinkTypes
        [StackOverflow2010Model.LinkType](T1.LinkType_Id, T1.LinkType_Type)
    FROM (
        SELECT 
            T.Id AS LinkType_Id, 
            T.Type AS LinkType_Type, 
            True AS _from0
        FROM StackOverflow2010ModelStoreContainer.LinkTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for StackOverflow2010Entities.PostLinks.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PostLinks
        [StackOverflow2010Model.PostLink](T1.PostLink_Id, T1.PostLink_CreationDate, T1.PostLink_PostId, T1.PostLink_RelatedPostId, T1.PostLink_LinkTypeId)
    FROM (
        SELECT 
            T.Id AS PostLink_Id, 
            T.CreationDate AS PostLink_CreationDate, 
            T.PostId AS PostLink_PostId, 
            T.RelatedPostId AS PostLink_RelatedPostId, 
            T.LinkTypeId AS PostLink_LinkTypeId, 
            True AS _from0
        FROM StackOverflow2010ModelStoreContainer.PostLinks AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for StackOverflow2010Entities.Posts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Posts
        [StackOverflow2010Model.Post](T1.Post_Id, T1.Post_AcceptedAnswerId, T1.Post_AnswerCount, T1.Post_Body, T1.Post_ClosedDate, T1.Post_CommentCount, T1.Post_CommunityOwnedDate, T1.Post_CreationDate, T1.Post_FavoriteCount, T1.Post_LastActivityDate, T1.Post_LastEditDate, T1.Post_LastEditorDisplayName, T1.Post_LastEditorUserId, T1.Post_OwnerUserId, T1.Post_ParentId, T1.Post_PostTypeId, T1.Post_Score, T1.Post_Tags, T1.Post_Title, T1.Post_ViewCount)
    FROM (
        SELECT 
            T.Id AS Post_Id, 
            T.AcceptedAnswerId AS Post_AcceptedAnswerId, 
            T.AnswerCount AS Post_AnswerCount, 
            T.Body AS Post_Body, 
            T.ClosedDate AS Post_ClosedDate, 
            T.CommentCount AS Post_CommentCount, 
            T.CommunityOwnedDate AS Post_CommunityOwnedDate, 
            T.CreationDate AS Post_CreationDate, 
            T.FavoriteCount AS Post_FavoriteCount, 
            T.LastActivityDate AS Post_LastActivityDate, 
            T.LastEditDate AS Post_LastEditDate, 
            T.LastEditorDisplayName AS Post_LastEditorDisplayName, 
            T.LastEditorUserId AS Post_LastEditorUserId, 
            T.OwnerUserId AS Post_OwnerUserId, 
            T.ParentId AS Post_ParentId, 
            T.PostTypeId AS Post_PostTypeId, 
            T.Score AS Post_Score, 
            T.Tags AS Post_Tags, 
            T.Title AS Post_Title, 
            T.ViewCount AS Post_ViewCount, 
            True AS _from0
        FROM StackOverflow2010ModelStoreContainer.Posts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for StackOverflow2010Entities.PostTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PostTypes
        [StackOverflow2010Model.PostType](T1.PostType_Id, T1.PostType_Type)
    FROM (
        SELECT 
            T.Id AS PostType_Id, 
            T.Type AS PostType_Type, 
            True AS _from0
        FROM StackOverflow2010ModelStoreContainer.PostTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for StackOverflow2010Entities.Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Users
        [StackOverflow2010Model.User](T1.User_Id, T1.User_AboutMe, T1.User_Age, T1.User_CreationDate, T1.User_DisplayName, T1.User_DownVotes, T1.User_EmailHash, T1.User_LastAccessDate, T1.User_Location, T1.User_Reputation, T1.User_UpVotes, T1.User_Views, T1.User_WebsiteUrl, T1.User_AccountId, T1.User_Region)
    FROM (
        SELECT 
            T.Id AS User_Id, 
            T.AboutMe AS User_AboutMe, 
            T.Age AS User_Age, 
            T.CreationDate AS User_CreationDate, 
            T.DisplayName AS User_DisplayName, 
            T.DownVotes AS User_DownVotes, 
            T.EmailHash AS User_EmailHash, 
            T.LastAccessDate AS User_LastAccessDate, 
            T.Location AS User_Location, 
            T.Reputation AS User_Reputation, 
            T.UpVotes AS User_UpVotes, 
            T.Views AS User_Views, 
            T.WebsiteUrl AS User_WebsiteUrl, 
            T.AccountId AS User_AccountId, 
            T.Region AS User_Region, 
            True AS _from0
        FROM StackOverflow2010ModelStoreContainer.Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for StackOverflow2010Entities.Votes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Votes
        [StackOverflow2010Model.Vote](T1.Vote_Id, T1.Vote_PostId, T1.Vote_UserId, T1.Vote_BountyAmount, T1.Vote_VoteTypeId, T1.Vote_CreationDate, T1.Vote_RowVersion)
    FROM (
        SELECT 
            T.Id AS Vote_Id, 
            T.PostId AS Vote_PostId, 
            T.UserId AS Vote_UserId, 
            T.BountyAmount AS Vote_BountyAmount, 
            T.VoteTypeId AS Vote_VoteTypeId, 
            T.CreationDate AS Vote_CreationDate, 
            T.RowVersion AS Vote_RowVersion, 
            True AS _from0
        FROM StackOverflow2010ModelStoreContainer.Votes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for StackOverflow2010Entities.VoteTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing VoteTypes
        [StackOverflow2010Model.VoteType](T1.VoteType_Id, T1.VoteType_Name)
    FROM (
        SELECT 
            T.Id AS VoteType_Id, 
            T.Name AS VoteType_Name, 
            True AS _from0
        FROM StackOverflow2010ModelStoreContainer.VoteTypes AS T
    ) AS T1");
        }
    }
}
